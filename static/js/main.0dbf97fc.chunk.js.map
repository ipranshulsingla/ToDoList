{"version":3,"sources":["models/Task.js","components/NewTask.js","components/Task.js","components/TasksList.js","components/Operations.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Task","this","taskName","date","time","description","NewTask","props","fields","state","Row","Col","sm","className","error","name","onChange","handleChange","bind","type","placeholder","rows","cols","autoCapitalize","autoComplete","onClick","takeInput","field","event","target","value","length","today","Date","getTime","handleValidation","Object","keys","setState","newTask","isSelected","taskId","generateTaskId","takeNewTask","Component","deleteIcon","selectTask","task","TasksList","tasks","renderTable","map","element","index","key","nextProps","prevState","Operations","id","searchTasks","deleteSelectedTasks","ToDoList","count","lastTaskId","preserveTasks","style","marginBottom","justifyContent","alignItems","margin","currentTasks","push","rowIndex","parentElement","selectedTask","finalTasks","filter","ele","finalPreservedTasks","toBeSearch","searchedTasks","match","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wVAAqBA,EACjB,aAAc,oBACVC,KAAKC,SAAS,GACdD,KAAKE,KAAK,GACVF,KAAKG,KAAK,GACVH,KAAKI,YAAY,ICAJC,G,wDAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDA,MAAMA,EACX,EAAKC,OAAO,CAACN,SAAS,GAAGC,KAAK,GAAGC,KAAK,GAAGC,YAAY,IACrD,EAAKI,MAAM,CAAC,MAAQ,IAJN,E,qDAQd,OAAO,oCACH,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,UAAU,UACd,yDADJ,IAC0C,6BACtC,2BAAOA,UAAWZ,KAAKQ,MAAMK,MAAMC,KAAMC,SAAUf,KAAKgB,aAAaC,KAAKjB,KAAK,YAAakB,KAAK,OAAOC,YAAY,qBAG5H,kBAACV,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,UAAU,UAClB,uCACA,2BAAOA,UAAWZ,KAAKQ,MAAMK,MAAMX,KAAMa,SAAUf,KAAKgB,aAAaC,KAAKjB,KAAK,QAASkB,KAAK,UAEjG,kBAACR,EAAA,EAAD,CAAKC,GAAI,EAAGC,UAAU,UAClB,uCACA,2BAAOA,UAAWZ,KAAKQ,MAAMK,MAAMV,KAAMY,SAAUf,KAAKgB,aAAaC,KAAKjB,KAAK,QAASkB,KAAK,WAGrG,kBAACT,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,UAAU,UACnB,+DAA2C,6BAC3C,8BAAUA,UAAWZ,KAAKQ,MAAMK,MAAMT,YAAaW,SAAUf,KAAKgB,aAAaC,KAAKjB,KAAK,eAAgBoB,KAAK,IAAIC,KAAK,KAAKF,YAAY,4BAA6BG,eAAe,YAAYC,aAAa,UAGrN,kBAACd,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,UAAU,mBAAkB,4BAAQY,QAASxB,KAAKyB,UAAUR,KAAKjB,MAAOkB,KAAK,SAASN,UAAU,mBAApE,a,mCAKnCc,EAAMC,GACf3B,KAAKO,OAAOmB,GAAOC,EAAMC,OAAOC,Q,yCAIhC,IAAItB,EAAOP,KAAKO,OACZM,EAAM,GAOV,GAN4B,IAAzBN,EAAON,SAAS6B,SAClBjB,EAAMC,KAAK,SAEmB,IAA5BP,EAAOH,YAAY0B,SAClBjB,EAAMT,YAAY,SAEE,IAArBG,EAAOL,KAAK4B,QAAmC,IAArBvB,EAAOJ,KAAK2B,OACrCjB,EAAMX,KAAK,QACXW,EAAMV,KAAK,YAEX,CACA,IAAI4B,GAAO,IAAIC,MAAQC,UACR,IAAID,KAAKzB,EAAOL,KAAK,IAAIK,EAAOJ,MAAO8B,UACzCF,IACTlB,EAAMX,KAAK,QACXW,EAAMV,KAAK,SAGnB,OAAOU,I,kCAIP,IAAIA,EAAMb,KAAKkC,mBACf,GAAGC,OAAOC,KAAKvB,GAAOiB,OAAO,EACzB9B,KAAKqC,SAAS,CAAC,MAAQxB,QAEvB,CACA,IAAIyB,EAAQ,IAAIvC,EAChB,IAAI,IAAI2B,KAAS1B,KAAKO,OAClB+B,EAAQZ,GAAO1B,KAAKO,OAAOmB,GAE/BY,EAAQC,YAAW,EACnBD,EAAQE,OAAOxC,KAAKM,MAAMmC,iBAC1BzC,KAAKM,MAAMoC,YAAYJ,Q,GA/EEK,cCJxB5C,EAAM,SAAAO,GACf,IAAMsC,EAAW,uBAAGpB,QAASlB,EAAMuC,WAAYjC,UAAU,qBACrD2B,EAAWjC,EAAMwC,KAAKP,WAAW,YAAY,GACjD,OAAO,wBAAI3B,UAAW2B,GAClB,4BAAKjC,EAAMwC,KAAK5C,MAChB,4BAAKI,EAAMwC,KAAK3C,MAChB,4BAAKG,EAAMwC,KAAK7C,UAChB,4BAAKK,EAAMwC,KAAK1C,aAChB,4BAAKwC,KCLQG,G,wDACjB,WAAYzC,GAAO,IAAD,8BACd,cAAMA,IACDA,MAAMA,EACX,EAAKE,MAAM,CAACwC,MAAM1C,EAAM0C,OAHV,E,qDAcd,OAAO,yBAAKpC,UAAU,UAClB,2BAAOA,UAAU,kCACb,+BACI,4BACI,oCACA,oCACA,oCACA,qCACA,yCAGR,+BACKZ,KAAKiD,mB,oCAmBR,IAAD,OACT,OAAOjD,KAAKQ,MAAMwC,MAAME,KAAI,SAACC,EAAQC,GAClC,OAAO,kBAAC,EAAD,CAAMP,WAAY,EAAKvC,MAAMuC,WAAYQ,IAAKD,EAAON,KAAMK,U,gDAzCzCG,EAAWC,GACvC,OAAGD,IAAYC,EACJ,CAAC,MAAQD,EAAUN,OACvB,S,GAVwBL,cCF1Ba,G,MAAW,SAAClD,GACrB,OAAO,yBAAKmD,GAAG,cACX,2BAAO1C,SAAUT,EAAMoD,YAAavC,YAAY,yBAAyBP,UAAU,sBAAsBM,KAAK,SAC9G,4BAAQA,KAAK,SAASN,UAAU,4BAAhC,UACA,4BAAQM,KAAK,SAASM,QAASlB,EAAMqD,oBAAqB/C,UAAU,2BAApE,aCEagD,G,wDAEjB,aAAc,IAAD,8BACT,gBACKC,MAAM,EACX,EAAKC,WAAW,EAChB,EAAKC,cAAc,GACnB,EAAKvD,MAAM,CAACwC,MAAM,IALT,E,qDAcT,OAAO,yBAAKpC,UAAU,aAClB,gCACI,wBAAIoD,MAAO,CAACC,aAAa,OAAzB,cAEJ,6BAASD,MATD,CACRE,eAAe,gBACfC,WAAW,aACXC,OAAO,GAMgBxD,UAAU,OAC7B,kBAACF,EAAA,EAAD,CAAKC,IAAE,GAAC,kBAAC,EAAD,CAAS8B,eAAgBzC,KAAKyC,eAAexB,KAAKjB,MAAO0C,YAAa1C,KAAK0C,YAAYzB,KAAKjB,SACpG,kBAACU,EAAA,EAAD,CAAKC,IAAE,GACH,kBAAC,EAAD,CAAY+C,YAAa1D,KAAK0D,YAAYzC,KAAKjB,MAAO2D,oBAAqB3D,KAAK2D,oBAAoB1C,KAAKjB,QACzG,kBAAC,EAAD,CAAWgD,MAAOhD,KAAKQ,MAAMwC,MAAOH,WAAY7C,KAAK6C,WAAW5B,KAAKjB,a,kCAM1EsC,GACR,IAAI+B,EAAarE,KAAKQ,MAAMwC,MAC5BqB,EAAaC,KAAKhC,GAClBtC,KAAKqC,SAAL,eAAkBrC,KAAKQ,MAAvB,CAA6BwC,MAAMqB,O,iCAG5B1C,GACN,IAAI4C,EAAS5C,EAAMC,OAAO4C,cAAcA,cAAcD,SAClDvB,EAAMhD,KAAKQ,MAAMwC,MACjByB,EAAazB,EAAMuB,EAAS,GAC7BE,EAAalC,WACZkC,EAAalC,YAAW,EAExBkC,EAAalC,YAAW,EAC5BS,EAAMuB,EAAS,GAAGE,EAClBzE,KAAKqC,SAAS,CAAC,MAAQW,M,4CAIvB,IAAI0B,EAAW1E,KAAKQ,MAAMwC,MAAM2B,QAAO,SAACC,GACpC,OAAIA,EAAIrC,cAIRsC,EAAoB7E,KAAK+D,cAAcY,QAAO,SAACC,GAC/C,OAAIA,EAAIrC,cAIZvC,KAAK+D,cAAcc,EACnB7E,KAAKqC,SAAS,CAACW,MAAM0B,M,kCAGb/C,GACR,IAAImD,EAAWnD,EAAMC,OAAOC,MAI5B,KAHE7B,KAAK6D,MACS,IAAb7D,KAAK6D,QACJ7D,KAAK+D,cAAc/D,KAAKQ,MAAMwC,OACX,IAApB8B,EAAWhD,OACV9B,KAAKqC,SAAS,CAAC,MAAQrC,KAAK+D,oBAE5B,CACA,IAAIgB,EAAc/E,KAAK+D,cAAcY,QAAO,SAAAC,GACxC,SAAGA,EAAI3E,SAAS+E,MAAMF,KAAaF,EAAI1E,KAAK8E,MAAMF,OAItD9E,KAAKqC,SAAS,CAAC,MAAQ0C,O,uCAM3B,QADE/E,KAAK8D,WACA9D,KAAK8D,e,GAnFkBnB,cCLjBsC,G,6KAEd,OAAO,kBAAC,EAAD,U,GAFmBtC,cCSbuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCZNM,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnF,GACLoF,QAAQpF,MAAMA,EAAMqF,c","file":"static/js/main.0dbf97fc.chunk.js","sourcesContent":["export default class Task{\r\n    constructor(){\r\n        this.taskName='';\r\n        this.date='';\r\n        this.time='';\r\n        this.description='';\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport {Row,Col} from 'react-bootstrap'\r\nimport Task from '../models/Task'\r\nimport '../css/NewTask.css'\r\n\r\nexport default class NewTask extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.props=props;\r\n        this.fields={taskName:'',date:'',time:'',description:''};\r\n        this.state={'error':{}};\r\n    }\r\n    \r\n    render(){\r\n        return <>\r\n            <Row>\r\n                <Col sm className='column'>\r\n                    <label>Tell us your task name</label> <br/>\r\n                    <input className={this.state.error.name} onChange={this.handleChange.bind(this,'taskName')} type='text' placeholder='Your task name'/>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col sm={6} className='column'>\r\n                    <label>Date</label>\r\n                    <input className={this.state.error.date} onChange={this.handleChange.bind(this,'date')} type='date'/>\r\n                </Col>\r\n                <Col sm={6} className='column'>\r\n                    <label>Time</label>\r\n                    <input className={this.state.error.time} onChange={this.handleChange.bind(this,'time')} type='time'/>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col sm={12} className='column'>\r\n                    <label>Tell us more about your task</label><br/>\r\n                    <textarea className={this.state.error.description} onChange={this.handleChange.bind(this,'description')} rows='5' cols='63' placeholder='Write description here...'  autoCapitalize='sentences' autoComplete='off'/>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col sm className='column save-btn'><button onClick={this.takeInput.bind(this)} type='button' className='btn btn-success'>Save</button></Col>\r\n            </Row>\r\n            </>\r\n    }\r\n\r\n    handleChange(field,event){\r\n        this.fields[field]=event.target.value;\r\n    }\r\n\r\n    handleValidation(){\r\n        let fields=this.fields;\r\n        let error={};\r\n        if(fields.taskName.length===0){\r\n         error.name=\"error\";   \r\n        }\r\n        if(fields.description.length===0){\r\n            error.description=\"error\";\r\n        }\r\n        if(fields.date.length===0 || fields.time.length===0){\r\n            error.date=\"error\";\r\n            error.time='error';\r\n        }\r\n        else{\r\n            let today=(new Date()).getTime();\r\n            let inputDate=(new Date(fields.date+' '+fields.time)).getTime();       \r\n            if(inputDate<today){\r\n                error.date=\"error\";\r\n                error.time='error';\r\n            }\r\n        }\r\n        return error;        \r\n    }\r\n\r\n    takeInput(){\r\n        let error=this.handleValidation();\r\n        if(Object.keys(error).length>0){\r\n            this.setState({'error':error});\r\n        }\r\n        else{\r\n            let newTask=new Task();\r\n            for(let field in this.fields){\r\n                newTask[field]=this.fields[field];\r\n            }\r\n            newTask.isSelected=false;\r\n            newTask.taskId=this.props.generateTaskId();\r\n            this.props.takeNewTask(newTask);\r\n        }\r\n    }\r\n\r\n}\r\n   ","import React from 'react'\r\nexport const Task=(props=>{\r\n    const deleteIcon=<i onClick={props.selectTask} className=\"fas fa-trash-alt\"></i>\r\n    var isSelected=props.task.isSelected?'bg-danger':'';\r\n    return <tr className={isSelected}>\r\n        <td>{props.task.date}</td>\r\n        <td>{props.task.time}</td>\r\n        <td>{props.task.taskName}</td>\r\n        <td>{props.task.description}</td>\r\n        <td>{deleteIcon}</td>\r\n    </tr>\r\n});","import React,{ Component } from \"react\";\r\nimport {Task} from \"./Task\";\r\nimport '../css/TaskList.css'\r\n\r\nexport default class TasksList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.props=props;\r\n        this.state={tasks:props.tasks};\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n        if(nextProps!==prevState)\r\n            return {'tasks':nextProps.tasks};\r\n        return null;\r\n    }\r\n\r\n\r\n    render(){\r\n        return <div className='scroll'>\r\n            <table className=\"table table-striped table-dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Date</th>\r\n                        <th>Time</th>\r\n                        <th>Name</th>\r\n                        <th>Desc.</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.renderTable()}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    }\r\n\r\n    // sortTasks(byWhich='date'){\r\n    //     if(byWhich==='date'){\r\n    //         Array.prototype.sort((a,b)=>{    \r\n    //             let aDate=new Date(a.date+' '+a.time).getTime;\r\n    //             let bDate=new Date(b.date+' '+b.time).getTime;\r\n    //             return aDate-bDate;\r\n    //         });\r\n    //         let sortedTasks=this.state.tasks;\r\n    //         sortedTasks.sort();\r\n    //         this.setState({'tasks':sortedTasks});\r\n    //     }\r\n    // }\r\n\r\n    renderTable(){\r\n        return this.state.tasks.map((element,index)=>{\r\n           return <Task selectTask={this.props.selectTask} key={index} task={element}/>\r\n        });\r\n    }\r\n\r\n}","import React from 'react'\r\nimport '../css/Operations.css'\r\nexport const Operations=(props)=>{\r\n    return <div id=\"operations\">\r\n        <input onChange={props.searchTasks} placeholder=\"Search by name or date\" className=\"opr-item search-bar\" type=\"text\"/>\r\n        <button type='button' className='btn btn-warning opr-item'>Update</button>\r\n        <button type='button' onClick={props.deleteSelectedTasks} className='btn btn-danger opr-item'>Delete</button>\r\n    </div>\r\n};","import React,{Component} from 'react';\r\nimport NewTask from './NewTask';\r\nimport TasksList from './TasksList';\r\nimport {Col} from 'react-bootstrap';\r\nimport {Operations} from './Operations';\r\nimport '../css/ToDoList.css'\r\n\r\n\r\nexport default class ToDoList extends Component{\r\n    \r\n    constructor(){\r\n        super();\r\n        this.count=0;\r\n        this.lastTaskId=0;\r\n        this.preserveTasks=[];\r\n        this.state={tasks:[]};\r\n    }\r\n\r\n    render(){\r\n        const style={\r\n            justifyContent:\"space-between\",\r\n            alignItems:\"flex-start\",\r\n            margin:0\r\n        }\r\n        return <div className='container'>\r\n            <header>\r\n                <h1 style={{marginBottom:\"2%\"}}>TO DO APP</h1>\r\n            </header>\r\n            <section style={style} className='row'>\r\n                <Col sm><NewTask generateTaskId={this.generateTaskId.bind(this)} takeNewTask={this.takeNewTask.bind(this)}/></Col>\r\n                <Col sm>\r\n                    <Operations searchTasks={this.searchTasks.bind(this)} deleteSelectedTasks={this.deleteSelectedTasks.bind(this)}/>\r\n                    <TasksList tasks={this.state.tasks} selectTask={this.selectTask.bind(this)}/>\r\n                </Col>\r\n            </section>\r\n        </div>\r\n   }\r\n\r\n   takeNewTask(newTask){\r\n       var currentTasks=this.state.tasks;\r\n       currentTasks.push(newTask);\r\n       this.setState({...this.state,tasks:currentTasks});\r\n   }\r\n\r\n   selectTask(event){\r\n        var rowIndex=event.target.parentElement.parentElement.rowIndex;\r\n        var tasks=this.state.tasks;\r\n        var selectedTask=tasks[rowIndex-1];\r\n        if(selectedTask.isSelected)\r\n            selectedTask.isSelected=false;\r\n        else\r\n            selectedTask.isSelected=true;\r\n        tasks[rowIndex-1]=selectedTask;\r\n        this.setState({\"tasks\":tasks});\r\n    }\r\n\r\n    deleteSelectedTasks(){\r\n        let finalTasks=this.state.tasks.filter((ele)=>{\r\n            if(!ele.isSelected)\r\n                return true;\r\n            return false;\r\n        });\r\n        let finalPreservedTasks=this.preserveTasks.filter((ele)=>{\r\n            if(!ele.isSelected)\r\n                return true;\r\n            return false;\r\n        });\r\n        this.preserveTasks=finalPreservedTasks;\r\n        this.setState({tasks:finalTasks});\r\n    }\r\n\r\n    searchTasks(event){\r\n        let toBeSearch=event.target.value;\r\n        ++this.count;\r\n        if(this.count===1)\r\n            this.preserveTasks=this.state.tasks;\r\n        if(toBeSearch.length===0){\r\n            this.setState({'tasks':this.preserveTasks});\r\n        }\r\n        else{\r\n            let searchedTasks=this.preserveTasks.filter(ele=>{\r\n                if(ele.taskName.match(toBeSearch)||ele.date.match(toBeSearch))\r\n                    return true\r\n                return false\r\n            });\r\n            this.setState({'tasks':searchedTasks});\r\n        }\r\n    }\r\n\r\n    generateTaskId(){\r\n        ++this.lastTaskId;\r\n        return this.lastTaskId;\r\n    }\r\n\r\n}","import React,{Component} from 'react'\nimport ToDoList from './components/ToDoList'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nexport default class App extends Component{\n    render(){\n       return <ToDoList/>\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}